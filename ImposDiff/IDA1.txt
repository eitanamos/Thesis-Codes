import win32com.client 
ExcelApp = win32com.client.GetActiveObject("Excel.Application")
ExcelWrkbook = ExcelApp.Workbooks(1)
ExcelWrkSht = ExcelWrkbook.Worksheets(1)

def same_difference(input_diff, num_of_p_pairs):

    def change_to_be_hex(str):
        return int(str, base=16)
    def hexop(num1, num2):
        res1 = change_to_be_hex(num1) ^ change_to_be_hex(num2)
        res1 = hex(res1)
        res = str(res1).replace("0x", "").upper()
        if len(res) < 2:
            res = "000" + res
        elif len(res) < 3:
            res = "00" + res
        elif len(res) < 4:
            res = "0" + res
        return res
    def number_to_hex(number):
        number = number
        if int(number) > 65536:
            return "Can't convert it to 4 character hexadecimal number"
        elif int(number) < 65537 and int(number) > -1:
            number = hex(number)
            number = number[2:]
            hex_representation = number.zfill(4)
            return hex_representation.upper()

    number_list = list(range(int(num_of_p_pairs)))

    new_hexa_list = []
    i = 0
    while i < len(number_list):
        new_hexa_list.append(number_to_hex(number_list[i]))
        i = i + 1

    new_new_hexa_list = []
    j = 0
    while j < len(new_hexa_list):
        new_new_hexa_list.append(hexop(new_hexa_list[j], input_diff))
        j = j + 1

    def two_numbers_into_tuple(number1, number2):
        brackets = [number1, number2]
        tuple_representation = brackets
        return tuple_representation

    m = 0
    bracket_list = []
    while m < len(new_new_hexa_list):
        bracket_list.append(two_numbers_into_tuple(new_hexa_list[m], new_new_hexa_list[m]))
        m = m + 1

    def get_uniques(links):
        my_set = set([])
        my_selection = []
        for l in links:
            s = "".join(sorted(l))
            if not s in my_set:
                my_set.add(s)
                my_selection.append(l)
        return my_selection

    bracket_list = get_uniques(bracket_list)
    def flatten(input):
        new_list = []
        for i in input:
            for j in i:
                new_list.append(j)
        return new_list
    bracket_list =flatten(bracket_list)

    return bracket_list
input_diff = '6000'
num_of_p_pairs = 70  
j=0
while j <len(same_difference(input_diff, num_of_p_pairs)):
    i =0
    while i < (len(same_difference(input_diff, num_of_p_pairs))/2):
        Cell1 = ExcelWrkSht.Cells(i+1,1)
        Cell2 = ExcelWrkSht.Cells(i+1,2)
        Cell1.Value = same_difference(input_diff, num_of_p_pairs)[j]
        Cell2.Value = same_difference (input_diff, num_of_p_pairs)[j+1]
        i= i+1
        j = j+2


def baby_rijndael(plaintext):
    key = '5C92'
    RCon = ["10", "20", "40", "80"]
    def change_to_be_hex(str):
        return int(str, base=16)
    def rot(w):
        p1 = w[0:int(len(w) / 2)]
        p2 = w[int(len(w) / 2):len(w)]
        return p2 + p1
    def hexop(num1, num2):
        res1 = change_to_be_hex(num1) ^ change_to_be_hex(num2)
        res1 = hex(res1)
        res = str(res1).replace("0x", "").upper()
        if len(res) < 2:
            res = "0" + res
        return res
    def sBox(w):
        dicto = {"0": "A", "1": "4", "2": "3", "3": "B", "4": "8", "5": "E", "6": "2", "7": "C", "8": "5", "9": "7",
                 "A": "6", "B": "F", "C": "0", "D": "1", "E": "9", "F": "D"}
        word = ""
        for c in w:
            word += dicto[c]
        return word
    def createW2(word, i):
        i = i - 1
        w0 = word[0:int(len(word) / 2)]
        w1 = word[int(len(word) / 2):len(word)]
        w_mid = hexop(sBox(rot(w1)), RCon[i])
        return hexop(w_mid, w0)
    def createWi(wi, wi2, i):
        i = i - 1
        w_mid = hexop(sBox(rot(wi2)), RCon[i])
        res = hexop(w_mid, wi)
        if len(res) < 2:
            res = "0" + res
        return res
    def shiftrows(w):
        return w[0:int(len(w) * 1 / 4)] + w[int(len(w) * 3 / 4):int(len(w))] + w[
                                                                               int(len(w) * 1 / 2):int(
                                                                                   len(w) * 3 / 4)] + w[
                                                                                                      int(
                                                                                                          len(
                                                                                                              w) * 1 / 4):int(
                                                                                                          len(
                                                                                                              w) * 1 / 2)]
    mixColumn = {
        "0": {"0": "00", "1": "5D", "2": "A9", "3": "F4", "4": "71", "5": "2C", "6": "D8", "7": "85", "8": "E2",
              "9": "BF",
              "A": "4B", "B": "16", "C": "93", "D": "CE", "E": "3A", "F": "67"},
        "1": {"0": "D5", "1": "88", "2": "7C", "3": "21", "4": "A4", "5": "F9", "6": "0D", "7": "50", "8": "37",
              "9": "6A",
              "A": "9E", "B": "C3", "C": "46", "D": "1B", "E": "EF", "F": "B2"},
        "2": {"0": "9A", "1": "C7", "2": "33", "3": "6E", "4": "EB", "5": "B6", "6": "42", "7": "1F", "8": "78",
              "9": "25",
              "A": "D1", "B": "8C", "C": "09", "D": "54", "E": "A0", "F": "FD"},
        "3": {"0": "4F", "1": "12", "2": "E6", "3": "BB", "4": "3E", "5": "63", "6": "97", "7": "CA", "8": "AD",
              "9": "F0",
              "A": "04", "B": "59", "C": "DC", "D": "81", "E": "75", "F": "28"},
        "4": {"0": "17", "1": "4A", "2": "BE", "3": "E3", "4": "66", "5": "3B", "6": "CF", "7": "92", "8": "F5",
              "9": "A8",
              "A": "5C", "B": "01", "C": "84", "D": "D9", "E": "2D", "F": "70"},
        "5": {"0": "C2", "1": "9F", "2": "6B", "3": "36", "4": "B3", "5": "EE", "6": "1A", "7": "47", "8": "20",
              "9": "7D",
              "A": "89", "B": "D4", "C": "51", "D": "0C", "E": "F8", "F": "A5"},
        "6": {"0": "8D", "1": "D0", "2": "24", "3": "79", "4": "FC", "5": "A1", "6": "55", "7": "08", "8": "6F",
              "9": "32",
              "A": "C6", "B": "9B", "C": "1E", "D": "43", "E": "B7", "F": "EA"},
        "7": {"0": "58", "1": "05", "2": "F1", "3": "AC", "4": "29", "5": "74", "6": "80", "7": "DD", "8": "BA",
              "9": "E7",
              "A": "13", "B": "4E", "C": "CB", "D": "96", "E": "62", "F": "3F"},
        "8": {"0": "2E", "1": "73", "2": "87", "3": "DA", "4": "5F", "5": "02", "6": "F6", "7": "AB", "8": "CC",
              "9": "91",
              "A": "65", "B": "38", "C": "BD", "D": "E0", "E": "14", "F": "49"},
        "9": {"0": "FB", "1": "A6", "2": "52", "3": "0F", "4": "8A", "5": "D7", "6": "23", "7": "7E", "8": "19",
              "9": "44",
              "A": "B0", "B": "ED", "C": "68", "D": "35", "E": "C1", "F": "9C"},
        "A": {"0": "B4", "1": "E9", "2": "1D", "3": "40", "4": "C5", "5": "98", "6": "6C", "7": "31", "8": "56",
              "9": "0B",
              "A": "FF", "B": "A2", "C": "27", "D": "7A", "E": "8E", "F": "D3"},
        "B": {"0": "61", "1": "3C", "2": "C8", "3": "95", "4": "10", "5": "4D", "6": "B9", "7": "E4", "8": "83",
              "9": "DE",
              "A": "2A", "B": "77", "C": "F2", "D": "AF", "E": "5B", "F": "06"},
        "C": {"0": "39", "1": "64", "2": "90", "3": "CD", "4": "48", "5": "15", "6": "E1", "7": "BC", "8": "DB",
              "9": "86",
              "A": "72", "B": "2F", "C": "AA", "D": "F7", "E": "03", "F": "5E"},
        "D": {"0": "EC", "1": "B1", "2": "45", "3": "18", "4": "9D", "5": "C0", "6": "34", "7": "69", "8": "0E",
              "9": "53",
              "A": "A7", "B": "FA", "C": "7F", "D": "22", "E": "D6", "F": "8B"},
        "E": {"0": "A3", "1": "FE", "2": "0A", "3": "57", "4": "D2", "5": "8F", "6": "7B", "7": "26", "8": "41",
              "9": "1C",
              "A": "E8", "B": "B5", "C": "30", "D": "6D", "E": "99", "F": "C4"},
        "F": {"0": "76", "1": "2B", "2": "DF", "3": "82", "4": "07", "5": "5A", "6": "AE", "7": "F3", "8": "94",
              "9": "C9",
              "A": "3D", "B": "60", "C": "E5", "D": "B8", "E": "4C", "F": "11"}
    }

    w0 = key[0:2]
    w1 = key[2:4]
    w2 = createW2(key, 1)
    w3 = hexop(w1, w2)
    w4 = createWi(w2, w3, 2)
    w5 = hexop(w3, w4)
    w6 = createWi(w4, w5, 3)
    w7 = hexop(w5, w6)
    w8 = createWi(w6, w7, 4)
    w9 = hexop(w7, w8)

    K0 = w0 + w1
    K1 = w2 + w3
    K2 = w4 + w5
    K3 = w6 + w7
    K4 = w8 + w9

    def mixC(word):
        diction = mixColumn
        newWord = ""
        for i in range(len(word)):
            if i % 2 != 0:
                continue
            newWord += diction[word[i + 1]][word[i]]
        return newWord
    def preOp(word):
        res = sBox(word)
        res = shiftrows(res)
        while (len(res) < 4):
            res = "0" + res
        return res
    def addRoundKey(word, w2, w3):
        mixW = mixC(word)
        res = hexop(mixW, w2 + w3)
        while (len(res) < 4):
            res = "0" + res
        return res
    def addRoundKeyi(word, wi, wi2):
        res = mixC(word)
        res = hexop(res, wi + wi2)
        while (len(res) < 4):
            res = "0" + res
        return res
    def addRoundKey4(word):
        res = hexop(word, w8 + w9)
        while (len(res) < 4):
            res = "0" + res
        return res
    def whitening(text, key):
        res = hexop(text, key)
        while (len(res) < 4):
            res = "0" + res
        return res

    # whitening step
    res = whitening(plaintext, key)

    # round 1
    res = preOp(res)
    res = addRoundKey(res, w2, w3)

    # round 2
    res = preOp(res)
    res = addRoundKeyi(res, w4, w5)

    # round 3
    res = preOp(res)
    res = addRoundKeyi(res, w6, w7)

    # round 4
    res = preOp(res)
    res = addRoundKey4(res)
    ciphertext = res

    return ciphertext

j =1
while j < 3:
    i =1
    while i < 71:
        Cell1 = ExcelWrkSht.Cells(i,j)
        Cell2 = ExcelWrkSht.Cells(i,j+2)
        Cell2.Value = baby_rijndael(str(Cell1))
        i= i+1
    j = j+1

