import win32com.client 
ExcelApp = win32com.client.GetActiveObject("Excel.Application")
ExcelWrkbook = ExcelApp.Workbooks(1)
ExcelWrkSht = ExcelWrkbook.Worksheets(1)

def same_difference(input_diff, num_of_p_pairs):

    def change_to_be_hex(str):
        return int(str, base=16)
    def hexop(num1, num2):
        res1 = change_to_be_hex(num1) ^ change_to_be_hex(num2)
        res1 = hex(res1)
        res = str(res1).replace("0x", "").upper()
        if len(res) < 2:
            res = "000" + res
        elif len(res) < 3:
            res = "00" + res
        elif len(res) < 4:
            res = "0" + res
        return res
    def number_to_hex(number):
        number = number
        if int(number) > 65536:
            return "Can't convert it to 4 character hexadecimal number"
        elif int(number) < 65537 and int(number) > -1:
            number = hex(number)
            number = number[2:]
            hex_representation = number.zfill(4)
            return hex_representation.upper()

    number_list = list(range(int(num_of_p_pairs)))

    new_hexa_list = []
    i = 0
    while i < len(number_list):
        new_hexa_list.append(number_to_hex(number_list[i]))
        i = i + 1

    new_new_hexa_list = []
    j = 0
    while j < len(new_hexa_list):
        new_new_hexa_list.append(hexop(new_hexa_list[j], input_diff))
        j = j + 1

    def two_numbers_into_tuple(number1, number2):
        brackets = [number1, number2]
        tuple_representation = brackets
        return tuple_representation

    m = 0
    bracket_list = []
    while m < len(new_new_hexa_list):
        bracket_list.append(two_numbers_into_tuple(new_hexa_list[m], new_new_hexa_list[m]))
        m = m + 1

    def get_uniques(links):
        my_set = set([])
        my_selection = []
        for l in links:
            s = "".join(sorted(l))
            if not s in my_set:
                my_set.add(s)
                my_selection.append(l)
        return my_selection

    bracket_list = get_uniques(bracket_list)
    def flatten(input):
        new_list = []
        for i in input:
            for j in i:
                new_list.append(j)
        return new_list
    bracket_list =flatten(bracket_list)

    return bracket_list

input_diff = '00B0'
num_of_p_pairs = 400
j=0
while j <len(same_difference(input_diff, num_of_p_pairs)):
    i =0
    while i < (len(same_difference(input_diff, num_of_p_pairs))/2):
        Cell1 = ExcelWrkSht.Cells(i+1,1)
        Cell2 = ExcelWrkSht.Cells(i+1,2)
        Cell1.Value = same_difference(input_diff, num_of_p_pairs)[j]
        Cell2.Value = same_difference (input_diff, num_of_p_pairs)[j+1]
        i= i+1
        j = j+2

def cipherfour(plaintext):

    def change_to_be_hex(str):
        return int(str, base=16)
    def sBox(w):
        dicto = {"0": "E", "1": "4", "2": "D", "3": "1", "4": "2", "5": "F", "6": "B", "7": "8", "8": "3", "9": "A",
                 "A": "6", "B": "C", "C": "5", "D": "9", "E": "0", "F": "7"}
        word = ""
        for c in w:
            word += dicto[c]
        return word
    def perm(word):
        res = format(int(str(word), 16), "016b")
        res = list(res)
        resperm = []
        i = 0
        while i < 16:
            if i == 15:
                resperm.append(res[i])
            else:
                resperm.append(res[(i * 4) % 15])
            i = i + 1
        res = ''.join(resperm)
        res = [res[i:i + 4] for i in range(0, len(res), 4)]

        def dictionary(res):
            dicto = {"0000": "0", "0001": "1", "0010": "2", "0011": "3", "0100": "4", "0101": "5", "0110": "6",
                     "0111": "7", "1000": "8", "1001": "9",
                     "1010": "A", "1011": "B", "1100": "C", "1101": "D", "1110": "E", "1111": "F"}
            word = ""
            for i in res:
                word = word + dicto[i]
            return word

        res = dictionary(res)

        return res
    def rot(w):
        p1 = w[0:int(len(w) / 2)]
        p2 = w[int(len(w) / 2):len(w)]
        return p2 + p1
    def hexop(num1, num2):
        res1 = change_to_be_hex(num1) ^ change_to_be_hex(num2)
        res1 = hex(res1)
        res = str(res1).replace("0x", "").upper()
        if len(res) < 2:
            res = "0" + res
        return res
    def createW2(word, i):
        i = i - 1
        w0 = word[0:int(len(word) / 2)]
        w1 = word[int(len(word) / 2):len(word)]
        w_mid = hexop(sBox(rot(w1)), RCon[i])
        return hexop(w_mid, w0)
    def createWi(wi, wi2, i):
        i = i - 1
        w_mid = hexop(sBox(rot(wi2)), RCon[i])
        res = hexop(w_mid, wi)
        if len(res) < 2:
            res = "0" + res
        return res
    def whitening(text, key):
        res = hexop(text, key)
        while (len(res) < 4):
            res = "0" + res
        return res
    def roundi(word, wi, wi2):
        res = sBox(word)
        while (len(res) < 4):
            res = "0" + res
        res = perm(res)
        res = hexop(res, wi + wi2)
        while (len(res) < 4):
            res = "0" + res
        return res
    def last_round(word):
        res = sBox(word)
        while (len(res) < 4):
            res = "0" + res
        res = hexop(res, w8 + w9)
        while (len(res) < 4):
            res = "0" + res
        return res
    key = '1234'
    RCon = ["10", "20", "40", "80"]
    w0 = key[0:2]
    w1 = key[2:4]
    w2 = createW2(key, 1)
    w3 = hexop(w1, w2)
    w4 = createWi(w2, w3, 2)
    w5 = hexop(w3, w4)
    w6 = createWi(w4, w5, 3)
    w7 = hexop(w5, w6)
    w8 = createWi(w6, w7, 4)
    w9 = hexop(w7, w8)
    K0 = w0 + w1
    K1 = w2 + w3
    K2 = w4 + w5
    K3 = w6 + w7
    K4 = w8 + w9
    # whitening step
    res = whitening(plaintext, key)

    # round 1
    res = roundi(res, w2, w3)

    # round 2
    res = roundi(res, w4, w5)

    # round 3
    res = roundi(res, w6, w7)

    # round 4
    res = last_round(res)

    return res

j =1
while j < 3:
    i =1
    while i <= int(len(same_difference('00B0', 400))/2):
        Cell1 = ExcelWrkSht.Cells(i,j)
        Cell2 = ExcelWrkSht.Cells(i,j+2)
        Cell2.Value = cipherfour(str(Cell1))
        i= i+1
    j = j+1
